import asyncio
import logging
import time
import re
import os
import httpx
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from telegram import Bot
import signal
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
config = {
    "chrome_driver_path": "C:\\Users\\–î–∞–Ω–∏–ª–∞\\Desktop\\GPT\\2\\chrome driver\\chromedriver.exe",
    "telegram_bot_token": "7213896068:AAGbXygK7S1Jv3fCwx6n7jGNaHDSH2SgxfQ",
    "channel_id": "@ImperialSochiRS",
    "source_channel_url": "https://t.me/s/developer_sochi",
    "phone_replacement": "+79170467895",
    "name_replacement": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ù–∞—Ç–∞–ª–∏—è",
    "name_pattern": "–ê—Ä—Ç—É—Ä|–ï–≤–≥–µ–Ω–∏–π|–ò–≤–∞–Ω|–ê–ª–µ–∫—Å–∞–Ω–¥—Ä|–î—Ä—É–≥–∏–µ–ò–º–µ–Ω–∞",
    "temp_video_file": "temp_video.mp4",  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
    "max_retries": 3,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    "timeout": 60,  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    "check_interval": 60,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    "last_message_file": "last_message.txt"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
}

logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebDriver
options = Options()
options.add_argument("--headless")
options.add_argument("--disable-gpu")

service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=options)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ñ—Ä–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def send_start_message():
    bot = Bot(token=config['telegram_bot_token'])
    await bot.send_message(chat_id=config['channel_id'], text="IMPERIAL RS")
    logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞: IMPERIAL RS")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ñ—Ä–∞–∑—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
async def send_end_message():
    bot = Bot(token=config['telegram_bot_token'])
    await bot.send_message(chat_id=config['channel_id'], text="üëã")
    logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: üëã")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
async def shutdown(loop):
    logging.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
    try:
        await send_end_message()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        driver.quit()
        logging.info("WebDriver –∑–∞–∫—Ä—ã—Ç.")
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
        logging.info("–í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        loop.stop()
        logging.info("–¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Ctrl+C)
def signal_handler(sig, frame):
    loop = asyncio.get_event_loop()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
    asyncio.ensure_future(shutdown(loop))

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
def read_last_message():
    if os.path.exists(config['last_message_file']):
        with open(config['last_message_file'], 'r', encoding='utf-8') as file:
            return file.read().strip()
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
def write_last_message(message):
    with open(config['last_message_file'], 'w', encoding='utf-8') as file:
        file.write(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_latest_message():
    driver.get(config['source_channel_url'])
    logging.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–Ω–∞–ª–∞.")
    time.sleep(10)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    logging.info("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

    body = driver.find_element(By.TAG_NAME, 'body')
    body.send_keys(Keys.PAGE_DOWN)
    time.sleep(2)

    message_block = driver.find_elements(By.CSS_SELECTOR, ".tgme_widget_message_wrap")[-1]  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    try:
        text = message_block.find_element(By.CSS_SELECTOR, ".tgme_widget_message_text").text
        text = re.sub(r"\b(\+7|8)?[\s\-\.]?\(?\d{3}\)?[\s\-\.]?\d{3}[\s\-\.]?\d{2}[\s\-\.]?\d{2}\b", config["phone_replacement"], text)
        text = re.sub(config["name_pattern"], config["name_replacement"], text)
        
        media_url = None
        media_type = None
        try:
            media_element = message_block.find_element(By.CSS_SELECTOR, ".tgme_widget_message_photo_wrap")
            media_url = media_element.get_attribute("style").split('url(\"')[1].split('\")')[0]
            media_type = 'photo'
        except Exception:
            try:
                media_element = message_block.find_element(By.CSS_SELECTOR, "video")
                media_url = media_element.get_attribute("src")
                media_type = 'video'
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤–∏–¥–µ–æ
                video_width = media_element.get_attribute("width")
                video_height = media_element.get_attribute("height")
                logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ: {media_url}, –®–∏—Ä–∏–Ω–∞: {video_width}, –í—ã—Å–æ—Ç–∞: {video_height}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        if media_url:
            logging.info(f"–ú–µ–¥–∏–∞ URL: {media_url}")
        
        return text, media_url, media_type

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None, None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
async def download_video(url):
    async with httpx.AsyncClient(timeout=config['timeout']) as client:
        response = await client.get(url)
        with open(config['temp_video_file'], 'wb') as video_file:
            video_file.write(response.content)
        logging.info(f"–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {config['temp_video_file']}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
async def send_message_to_channel(message, media_url, media_type):
    bot = Bot(token=config['telegram_bot_token'])
    
    retries = 0
    while retries < config["max_retries"]:
        try:
            if media_type == 'photo':
                await bot.send_photo(chat_id=config['channel_id'], photo=media_url, caption=message)
            elif media_type == 'video':
                await download_video(media_url)
                with open(config['temp_video_file'], 'rb') as video_file:
                    await bot.send_video(chat_id=config['channel_id'], video=video_file, caption=message)
                os.remove(config['temp_video_file'])
            else:
                await bot.send_message(chat_id=config['channel_id'], text=message)
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
            write_last_message(message)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            break  # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –≤—ã–π—Ç–∏ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        except Exception as e:
            retries += 1
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ø—ã—Ç–∫–∞ {retries}: {e}")
            if retries >= config["max_retries"]:
                logging.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await send_start_message()
    last_sent_message = read_last_message()

    try:
        while True:
            latest_message, latest_media_url, latest_media_type = get_latest_message()
            
            if latest_message and latest_message != last_sent_message:
                await send_message_to_channel(latest_message, latest_media_url, latest_media_type)
                last_sent_message = latest_message

            await asyncio.sleep(config['check_interval'])
    except asyncio.CancelledError:
        logging.info("–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–µ—Ä–≤–∞–Ω.")
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logging.info("–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
    finally:
        try:
            loop.run_until_complete(shutdown(loop))
        except RuntimeError:
            logging.info("–¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        finally:
            loop.close()
            logging.info("–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
